import java.util.*;

public class Tester {

	final static int MANKALA_A = 6;
	final static int MANKALA_B = 13;
	public static void main(String[] args) {
		int []pits = new int[14];
		
	}
	
	public void game(int[] pits) {
		Scanner scan = new Scanner(System.in);
		int player = 0; // 0 if it's player A's turn, 1 if it's player B's turn
		Boolean gameOver = false; // true when the whole game is over
		int undo = 3; // keeps track of # of chance left for the player to undo
		int choice = -1;
		int cur = -1;
		
		// loop until the game is over
		while(!gameOver) {
			if(player == 0) { 
				System.out.println("Player A's turn, pick the pit you want to begin with(1-6):");
				choice = scan.nextInt();
				cur = choice;
				
			} else {
				System.out.println("Player B's turn, pick the pit you want to begin with(1-6):");
				choice = scan.nextInt();
				cur = choice + 6;
				while() {
					
				}
			}
			
			if((pits[13] + pits[6]) == 48) // this part needs to be modified according to the # of pebbles the player wants to start with
				gameOver = true;
		}
	}
	
	public void distribute(int[] pits, int start, int player) {
		Boolean roundDone = false; // true when one player's round is finished
		pits[start] = 0; // clear the current pit's pebbles
		int cur = start + 1;
		int pebbles = pits[start];
		while(!roundDone) {
			while(pebbles != 0) {
				pits[cur]++; // add 1 to the pit
				pebbles -= 1; // remaining pebbles - 1
				if(cur+1 == MANKALA_B && player == 0) // if it's player A's turn and it reaches the mancala B, reset cur
					cur = 0;
				else if (cur+1 == MANKALA_A && player == 1) // if it's player A's turn and it reaches the mancala A, skip it
					cur+=2;
				else
					cur++;
				
				if(cur == 14)
					cur = 0;
			}
			if(pits[cur] == 0) // if the last pebble lands in an empty pit other than the two mancala, round done
				roundDone = true;
		}
	}

}
