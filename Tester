import java.util.*;

public class Tester {

	final static int MANCALA_A = 6;
	final static int MANCALA_B = 13;
	public static void main(String[] args) {
		int []pits = new int[14];
		for(int i = 0; i < 14; i++) 
		{	pits[i] = 4;	}
		pits[MANCALA_A] = 0;
		pits[MANCALA_B] = 0;
		game(pits);
		
		
	}
	
	public static void doSomthing(int[] list) {
		list[2] = 0;
	}
	
	public static void game(int[] pits) {
		Scanner scan = new Scanner(System.in);
		int player = 0; // 0 if it's player A's turn, 1 if it's player B's turn
		Boolean gameOver = false; // true when the whole game is over
		
		// loop until the game is over
		while(!gameOver) {
			if(player == 0) { 
				move(pits, 0);
				player = 1;
			} else {
				move(pits, 1);
				player = 0;
			}
		}
	}
	
	/**
	 * This is a function that will complete a player's turn
	 * 
	 * @param pits int array that keeps track of the # of pebbles in each pit
	 * @param player 0 for player A, 1 for player B
	 * @param total the total number of pebbles on the board
	 */
	public static void move(int[] pits, int player) {
		Scanner scan = new Scanner(System.in);
		int cur; // int that indicates the current pit
		int undo = 3; // num of times left for the currrent player to undo
		
		int []copy = pits.clone();
		Boolean confirm = false;
		while(!confirm) {
			Boolean scored = true; 
			while(scored) { // loop again if the last pebble lands in the player's mancala
				printBoard(pits);
				scored = false;
				// get user input of the pit to start with and set the current pit
				System.out.println("Player " + (char)(player+65) + "'s turn, pick the pit you want to begin with(1-6):");
				int start = scan.nextInt();
				
				 // get the actual index of the array corresponding to the user's choice
				if(player == 0) 
					cur = start - 1;
				else 
					cur = start + 6;
				
				int pebbles = pits[cur]; // get the number of pebbles in the pit which the player wants to start with
				pits[cur] = 0; // clear the current pit's pebbles
				
				// loop until all the pebbles in that pit has been distributed
				while(pebbles != 0) {
					cur++;
					if(cur == MANCALA_B && player == 0)
						cur = 0;
					else if (cur == MANCALA_A && player == 1)
						cur++;
					else if (cur > 13)
						cur = 0;
					pits[cur]++;
					pebbles -= 1; // remaining pebbles - 1
				}
				
				// if the last pebble lands in an empty spot of the player's side, he gets to collect this pebble and the opposite pit's pebble to his mancala
				if(pits[cur] == 1 && cur < 6 && player == 0 && pits[12 - cur] != 0) {
					pits[MANCALA_A] += (1 + pits[12 - cur]);
					pits[cur] = 0;
					pits[12 - cur] = 0;
				} else if (pits[cur] == 1 && cur < 13 && cur > 6 && player == 1 && pits[12 - cur] != 0) {
					pits[MANCALA_B] += (1 + pits[12 - cur]);
					pits[cur] = 0;
					pits[12 - cur] = 0;
				}
				
				// check if the game is over after every move
				if (gameOver(pits) && (pits[MANCALA_A] > pits[MANCALA_B])) {
					System.out.println("Game over, player A wins!");
					return;
				} else if (gameOver(pits) && (pits[MANCALA_A] < pits[MANCALA_B])) {
					System.out.println("Game over, player B wins!");
					return;
				} else if (gameOver(pits)){
					System.out.println("Game over, draw!");
					return;
				}
				
				// if it lands in the current player's mancala and the game is not over yet, then that player gets another chance
				scored = ((cur == MANCALA_A && player == 0) || (cur == MANCALA_B && player == 1));
				if (scored)
					System.out.println("Scored, another chance granted.");
			}
			
			printBoard(pits);
			
			// ask if the player wants to undo this move
			System.out.println("Do you want to finalize your move?\n1. Yes I confirm\n2. No I want to undo");
			int choice = scan.nextInt();
			if(choice == 1) {
				confirm = true;
			} else if(choice != 1 && undo != 0){
				confirm = false;
				pits = copy.clone();
				System.out.println("Undo remaining: " + (--undo));
				printBoard(pits);
			} else if (choice != 1 && undo == 0) {
				System.out.println("You have used up all your undo chances, it's now the other players turn.");
				confirm = true;
			}
		}
	}


	// check if the game is over
	public static Boolean gameOver(int []pits)
	{	return (pits[13] + pits[6] == 48);	}
	
	
	// this function prints the array
	public static void printBoard(int []arr) {
		System.out.println("B             A");
		System.out.print(arr[MANCALA_B] + " ");
		for(int i = 12; i > 6; i--)
		{	System.out.print(arr[i] + " ");	}
		System.out.println(arr[MANCALA_A]);
		System.out.print("  ");
		for(int i = 0; i < 6; i++)
		{	System.out.print(arr[i] + " ");	}
		System.out.println();
	}

	
}
